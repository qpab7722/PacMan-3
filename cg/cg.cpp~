// cg.cpp : Defines the entry point for the console application.
//#if defined(__APPLE__) || defined(MACOSX)
//#include <GLUT/glut.h>
//#else
//#include <GL/glut.h>
//#endif

#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <GL/glut.h>
#include "Pacman.h"
#include "Labirinto.h"
int h, w;
GLsizei w_global=400, h_global=400; //tamanho
Pacman pac(-0.5f, -0.5f, 1.0f); //pacman inicial
Labirinto lab = Labirinto(); //labirinto

void myReshape(GLsizei width, GLsizei height){
	w = width;
	h = height;
}

void newLabirinto(int num){
	if(num==1){//mudar para labirinto 1
		//int l1[12][12]={{2,2,2,2,2,2,2,2,2,2,2,2}, //matriz do labirinto 1
		//			   {2,1,1,1,1,1,1,1,1,1,3,2},
		//			   {2,1,2,1,1,2,1,1,2,1,1,2},
		//			   {2,1,2,2,1,2,1,2,2,1,1,2},
		//			   {2,1,1,1,1,3,1,1,1,1,1,2},
		//			   {2,1,2,1,2,0,2,2,1,2,1,2},
		//			   {2,1,2,1,2,0,0,2,1,2,1,2},
		//			   {2,1,2,1,2,2,2,2,1,2,1,2},
		//			   {2,1,2,1,1,1,1,1,1,3,1,2},
		//			   {2,1,2,2,2,3,2,2,2,1,1,2},
		//			   {2,3,1,1,1,1,1,1,1,1,1,2},
		//			   {2,2,2,2,2,2,2,2,2,2,2,2}};
		lab.setLab("defaultmaze.dat");
	};
	if(num==2){//mudar para labirinto 2
		//int l2[12][12]={{2,2,2,2,2,2,2,2,2,2,2,2}, //matriz do labirinto 2
		//			   {2,3,1,1,1,1,1,1,1,1,3,2},
		//			   {2,1,2,2,1,2,2,1,2,2,1,2},
		//			   {2,1,2,1,1,2,2,1,1,2,1,2},
		//			   {2,1,1,1,1,3,1,1,1,1,1,2},
		//			   {2,1,2,1,2,0,2,2,1,2,1,2},
		//			   {2,1,2,1,2,0,0,2,1,2,1,2},
		//			   {2,1,2,1,2,2,2,2,1,2,1,2},
		//			   {2,1,2,1,2,3,1,1,1,1,1,2},
		//			   {2,1,2,1,2,2,2,2,2,1,1,2},
		//			   {2,3,1,1,1,1,1,1,1,1,3,2},
		//			   {2,2,2,2,2,2,2,2,2,2,2,2}};
		lab.setLab("maze2.dat");
	};
	if(num==3){//mudar para labirinto 3
		//int l3[12][12]={{2,2,2,2,2,2,2,2,2,2,2,2}, //matriz do labirinto 3
		//			   {2,3,1,1,1,1,1,1,1,1,3,2},
		//			   {2,1,2,2,1,1,2,2,1,2,1,2},
		//			   {2,1,1,1,1,2,2,1,1,2,1,2},
		//			   {2,1,2,1,1,3,1,1,1,1,1,2},
		//			   {2,1,2,1,2,0,2,2,1,2,1,2},
		//			   {2,1,2,1,2,0,0,2,1,2,1,2},
		//			   {2,1,2,1,2,2,2,2,1,2,1,2},
		//			   {2,1,1,1,1,1,1,1,1,2,1,2},
		//			   {2,2,1,2,2,2,2,2,1,1,1,2},
		//			   {2,3,1,1,1,1,1,1,1,1,3,2},
		//			   {2,2,2,2,2,2,2,2,2,2,2,2}};
		lab.setLab("maze3.dat");
	};
}

void display(void)
{
	double f = ((float) w) / h;
	glViewport( 0, 0, w, h);
	//projecção
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//dimensao do viewport
	glOrtho(-7.0f * f, 7.0f * f, -7.0f, 7.0f, -7.0f, 7.0f);
	//vista
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	//chao
	glColor3f(0.0f, 0.0f, 1.0f);
	glPushMatrix();
	glBegin(GL_POLYGON);
	glVertex3f(-6.0f, -6.0f, 0.5f);
	glVertex3f(6.0f, -6.0f, 0.5f);
	glVertex3f(6.0f, 6.0f, 0.5f);
	glVertex3f(-6.0f, 6.0f, 0.5f);
	glEnd();
	//labirinto
	glPopMatrix();
	lab.drawLabirinto();
	glPopMatrix();
	glLoadIdentity();
	//pacman
	glPushMatrix();
	glTranslated(pac.getPosx(),pac.getPosy(),0);
	//printf("draw xpos, ypos %f,%f \n",pac.getPosx(),pac.getPosy());
	pac.drawPacman();
	glPopMatrix();
}

void myDisplay(void) {
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//limpa a janela
	glClear(GL_COLOR_BUFFER_BIT /*| GL_DEPTH_BUFFER_BIT - ainda não é preciso?*/);
	display();
	glFlush();
}

void handleArrowsKey(int key, int x, int y){
	int i,j;

	i=abs((pac.getPosx())+6.0f);
	j=abs((pac.getPosy())-6.0f);

	if( key == GLUT_KEY_LEFT ){
		pac.setDirecao(270.0f);
		if(!(lab.paredeQ(i-1, j))){
			pac.setNewPosx(-0.1f);
		}
		else
			pac.setAndar(false);
	}
	else if( key == GLUT_KEY_RIGHT ){
		pac.setDirecao(90.0f);
		if(!(lab.paredeQ(i+1, j)))
				pac.setNewPosx(0.1f);
		else
			pac.setAndar(false);
	}
	else if( key == GLUT_KEY_UP ){
		pac.setDirecao(180.0f);
		if(!(lab.paredeQ(i, j+1)))
				pac.setNewPosx(0.1f);
		else
			pac.setAndar(false);
	}
	else if( key == GLUT_KEY_DOWN ){
		pac.setDirecao(0.0f);
		if(!(lab.paredeQ(i, j-1)))
				pac.setNewPosx(0.1f);
		else
			pac.setAndar(false);
	}
	glutPostRedisplay();
}

void handleKeys( unsigned char key, int x, int y){
	int i,j;

	i=abs((pac.getPosx())+6.0f);
	j=abs((pac.getPosy())-6.0f);

	if( key == 'a' ){
		pac.setDirecao(270.0f);
		if(!(lab.paredeQ(i-1, j))){
			pac.setNewPosx(-0.1f);
		}
		else
			pac.setAndar(false);
	}
	else if( key == 'w' ){
		pac.setDirecao(180.0f);
		if(!(lab.paredeQ(i, j+1)))
				pac.setNewPosx(0.1f);
		else
			pac.setAndar(false);
	}
	else if( key == 'd' ){
		pac.setDirecao(90.0f);
		if(!(lab.paredeQ(i+1, j)))
				pac.setNewPosx(0.1f);
		else
			pac.setAndar(false);
	}
	else if( key == 's' ){
		pac.setDirecao(0.0f);
		if(!(lab.paredeQ(i, j-1)))
				pac.setNewPosx(0.1f);
		else
			pac.setAndar(false);
	}
	else if(key=='z'){//mudar para labirinto 1
		pac.setDirecao(0.0f);
		pac.setPosx(-0.5f);
		pac.setPosy(-0.5f);
		newLabirinto(1);
	}
	else if(key=='x'){//mudar para labirinto 2
		pac.setDirecao(0.0f);
		pac.setPosx(-0.5f);
		pac.setPosy(-0.5f);
		newLabirinto(2);
	}
	else if(key=='c'){//mudar para labirinto 3
		pac.setDirecao(0.0f);
		pac.setPosx(-0.5f);
		pac.setPosy(-0.5f);
		newLabirinto(3);
	}
	glutPostRedisplay();
}

void specialKeyUp(int key, int x, int y){
	float fractpart, intpart;
	if(key == GLUT_KEY_LEFT || key == GLUT_KEY_RIGHT){
		fractpart = modf (pac.getPosx() , &intpart);
		//printf("(%f)\n",abs(fractpart));
		while(pac.getAndar() && (abs(fractpart)>0.501f || abs(fractpart)<0.499f)){
			//glutTimerFunc(25, função, 0)handleArrowsKey(key,x,y);
			switch (pac.getDirecao()){
			case 90:
				pac.setNewPosx(0.1);
				break;
			case 270:
				pac.setNewPosx(-0.1);
			};
			fractpart = modf (pac.getPosx() , &intpart);
		}
		//andar=false;
	}
	else if(key == GLUT_KEY_UP || key == GLUT_KEY_DOWN){
		fractpart = modf (pac.getPosy() , &intpart);
		//printf("(%f)\n",abs(fractpart));
		while(pac.getAndar() && (abs(fractpart)>0.501f || abs(fractpart)<0.499f)){
			switch (pac.getDirecao()){
			case 0:
				pac.setNewPosy(-0.1);
				break;
			case 180:
				pac.setNewPosy(0.1);
				break;
			};
			fractpart = modf (pac.getPosy() , &intpart);
		}
		//andar=false;
	}
}

void keyUpFunc(unsigned char key, int x, int y){
	float fractpart, intpart;
	if(key == 'a' || key == 'd'){
		fractpart = modf (pac.getPosx() , &intpart);
		//printf("(%f)\n",abs(fractpart));
		while(abs(fractpart)>0.51f || abs(fractpart)<0.49f){
			handleKeys(key,x,y);
			fractpart = modf (pac.getPosx() , &intpart);
		};
	}
	else if(key == 'w' || key == 's'){
		fractpart = modf (pac.getPosy() , &intpart);
		//printf("(%f)\n",abs(fractpart));
		while(abs(fractpart)>0.51f || abs(fractpart)<0.49f){
			handleKeys(key,x,y);
			fractpart = modf (pac.getPosy() , &intpart);
		};
	};
};

void main(int argc, char* argv[]){
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize (w_global, h_global);
	glutInitWindowPosition (100, 100);
	glutCreateWindow("Pac-Man");
	glutDisplayFunc(myDisplay);
	glutReshapeFunc(myReshape);
	glutKeyboardFunc(handleKeys);
	glutKeyboardUpFunc(keyUpFunc);
	glutSpecialFunc(handleArrowsKey);
	glutSpecialUpFunc(specialKeyUp);
	glutMainLoop();
}
